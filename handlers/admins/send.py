from aiogram import types
from aiogram.dispatcher import FSMContext
from filters import IsPrivate, IsAdminCheck
from keyboards.inline import kb_cancel, kb_menu_photo, kb_menu
from loader import dp
from state.send_to_chat import send_news_admin
from data.config import cfg

chanel_id = cfg['channel_ids']


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(IsPrivate(), IsAdminCheck(), text="/sendnews")
async def get_send_notice(message: types.Message):
    global msg_answer
    msg_answer = await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:', reply_markup=kb_cancel)
    await send_news_admin.text.set()


@dp.message_handler(IsPrivate(), state=send_news_admin)
async def notice_text(message: types.Message, state: FSMContext):
    await message.delete()
    answer = message.text
    await state.update_data(text=answer)
    await message.answer(text=f'<b>–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏</b>: {answer}', reply_markup=kb_menu)
    await send_news_admin.state.set()
    await msg_answer.delete()


@dp.callback_query_handler(text='next', state=send_news_admin.state)
async def start_notice(call: types.CallbackQuery, state:FSMContext):
    await call.answer(cache_time=5)
    await call.message.delete()
    data = await state.get_data()
    text = data.get('text')
    await state.finish()
    await dp.bot.send_message(chanel_id, text=f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                                                                           f"<b>{text}</b>")
    await call.message.answer('‚úâ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç–æ—Å–ª–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.')


@dp.callback_query_handler(text='add_photo', state=send_news_admin.state)
async def add_photo(call: types.CallbackQuery):
    await call.answer(cache_time=5)
    await call.message.delete()
    global msg_photo_answer
    msg_photo_answer = await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ')
    await send_news_admin.photo.set()


@dp.message_handler(IsPrivate(), state=send_news_admin.photo, content_types=types.ContentType.PHOTO)
async def send_text(message: types.Message, state: FSMContext):
    await msg_photo_answer.delete()
    await message.delete()
    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo=photo_file_id)
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')
    await message.answer_photo(photo=photo, caption=f'<b>–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏</b>: {text}\n'
                                                    f'–ò –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Ñ–æ—Ç–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨Ü–û—Ç–ø—Ä–∞–≤–∏—Ç—å', reply_markup=kb_menu_photo)


@dp.callback_query_handler(text='next', state=send_news_admin.photo)
async def get_start_notice(call: types.CallbackQuery, state:FSMContext):
    await call.answer(cache_time=5)
    await call.message.delete()
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')
    await state.finish()
    await dp.bot.send_photo(chanel_id, photo=photo, caption=f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                                                                                                f"<b>{text}</b>")
    await call.message.answer('‚úâ –í–∞—à–∞ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç–æ—Å–ª–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø—É.')


@dp.message_handler(IsPrivate(), state=send_news_admin.photo)
async def no_photo(message: types.Message):
    await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ', reply_markup=kb_cancel)


@dp.callback_query_handler(text='quit', state=[send_news_admin.text, send_news_admin.photo, send_news_admin.state])
async def quit(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    await state.finish()
    await call.message.delete()
    await call.message.answer('‚ùå–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–º–µ–Ω–µ–Ω–∞')




